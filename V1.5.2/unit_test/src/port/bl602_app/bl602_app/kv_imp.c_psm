#include "kv_imp.h"
#include "utest.h"
#include "ez_hal/hal_thread.h"

#include "FreeRTOS.h"
#include "semphr.h"
#include <easyflash.h>
static void *m_kv_mutex;

void kv_lock(fdb_db_t db)
{
    hal_thread_mutex_lock(&m_kv_mutex);
}

void kv_unlock(fdb_db_t db)
{
    hal_thread_mutex_lock(&m_kv_mutex);
}

static SemaphoreHandle_t s_lock = NULL;
static void lock(fdb_db_t db)
{
    xSemaphoreTake(s_lock, portMAX_DELAY);
}

static void unlock(fdb_db_t db)
{
    xSemaphoreGive(s_lock);
}

int32_t kv_init_adv(fdb_kvdb_t db, const char *name, const char *part_name, struct fdb_default_kv *default_kv, int32_t max_size, int32_t sec_size)
{
    bool file_mode = true;
    if (s_lock == NULL)
    {
        s_lock = xSemaphoreCreateCounting(1, 1);
    }

    if (db->parent.init_ok)
    {
        return 0;
    }

    fdb_kvdb_control(db, FDB_KVDB_CTRL_SET_LOCK, (void *)lock);
    fdb_kvdb_control(db, FDB_KVDB_CTRL_SET_UNLOCK, (void *)unlock);
    fdb_kvdb_control(db, FDB_KVDB_CTRL_SET_FILE_MODE, (void *)&file_mode);
    fdb_kvdb_control(db, FDB_KVDB_CTRL_SET_MAX_SIZE, (void *)&max_size);
    fdb_kvdb_control(db, FDB_KVDB_CTRL_SET_SEC_SIZE, (void *)&sec_size);

    return fdb_kvdb_init(db, name, part_name, default_kv, NULL);
}

// static struct fdb_kvdb ez_kvdb;
#define EZ_KVDB_NAME "ez_kvdb"
#define EZ_KVDB_PART_NAME "/romfs"
#define EZ_KVDB_MAX_SIZE (1024 * 20)
#define EZ_KVDB_SEC_SIZE (1024 * 10)

kv_err_e kv_init(ez_iot_kv_t *default_kv)
{
    /**
     * @brief For single product devices, 16k is recommended, and for gateway devices,
     *          16*n is recommended, where n is the number of sub-devices.
     */
    bool file_mode = true;
    int32_t max_size = EZ_KVDB_MAX_SIZE;
    int32_t sec_size = EZ_KVDB_SEC_SIZE;
    // m_kv_mutex = hal_thread_mutex_create();
    // if (NULL == m_kv_mutex)
    // {
    //     printf("mutex create failed.\r\n");
    //     return ez_kv_no_err;
    // }
    if (s_lock == NULL)
    {
        s_lock = xSemaphoreCreateCounting(1, 1);
    }

    for (size_t i = 0; i < default_kv->num; i++)
    {
        ez_iot_kv_node_t *kv = default_kv->kvs + i;
        kv_raw_set((int8_t *)kv->key, kv->value, kv->value_len);
    }

    // if (ez_kvdb.parent.init_ok)
    // {
    //     return ez_kv_no_err;
    // }

    // fdb_kvdb_control(&ez_kvdb, FDB_KVDB_CTRL_SET_LOCK, (void *)lock);
    // fdb_kvdb_control(&ez_kvdb, FDB_KVDB_CTRL_SET_UNLOCK, (void *)unlock);
    // fdb_kvdb_control(&ez_kvdb, FDB_KVDB_CTRL_SET_FILE_MODE, (void *)&file_mode);
    // fdb_kvdb_control(&ez_kvdb, FDB_KVDB_CTRL_SET_MAX_SIZE, (void *)&max_size);
    // fdb_kvdb_control(&ez_kvdb, FDB_KVDB_CTRL_SET_SEC_SIZE, (void *)&sec_size);

    // fdb_kvdb_init(&ez_kvdb, EZ_KVDB_NAME, EZ_KVDB_PART_NAME, (struct fdb_default_kv *)default_kv, NULL);

    return ez_kv_no_err;
}

kv_err_e kv_raw_set(const int8_t *key, int8_t *value, uint32_t length)
{
    // struct fdb_blob blob;

    // return fdb_kv_set_blob(&ez_kvdb, (const char *)key, fdb_blob_make(&blob, value, length));
    int ret = ef_set_env_blob((char *)key, value, length);
    ef_save_env();
    return ret;
}

kv_err_e kv_raw_get(const int8_t *key, int8_t *value, uint32_t *length)
{
    // if (NULL == value)
    // {
    //     char temp_value[1];
    //     ef_get_env_blob((char *)key, temp_value, 0, length);
    //     return 0;
    // }
    ef_get_env_blob((char *)key, value, *length, NULL);
    return 0;

    // struct fdb_blob blob;

    // size_t read_len = fdb_kv_get_blob(&ez_kvdb, (const char *)key, fdb_blob_make(&blob, value, *length));
    // if (read_len < 0)
    // {
    //     return ez_kv_read_err;
    // }

    // if (NULL == value)
    // {
    //     *length = read_len;
    //     return ez_kv_no_err;
    // }

    // *length = read_len;
    // return ez_kv_no_err;
}

kv_err_e kv_del(const int8_t *key)
{
    // return fdb_kv_del(&ez_kvdb, (const char *)key);
    int ret = ef_del_env((char *)key);
    ef_save_env();
    return ret;
}

kv_err_e kv_del_by_prefix(const int8_t *key_prefix)
{
    //TODO
    return ez_kv_no_err;
}

void kv_print(void)
{
    // fdb_kv_print(&ez_kvdb);
    ef_print_env();
}

void kv_deinit(void)
{
    //do nothing
}